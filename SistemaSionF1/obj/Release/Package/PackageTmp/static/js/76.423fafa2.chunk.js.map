{"version":3,"sources":["services/postArchivoFlujo.js","views/components/flujos/archivoflujo/canvasPreview.js","views/components/flujos/archivoflujo/cropImage.js","views/components/flujos/archivoflujo/EditarArchivoFlujo.js","views/components/flujos/archivoflujo/useDebounceEffect.js"],"names":["API","process","postArchivoFlujo","idArchivoFlujo","idFlujo","idUsuario","descripcion","archivos","nombre_archivo","opcion","token","ApiFinal","ApiWhere","datos","id_archivoflujo","id_flujo","id_usuario","url","data","JSON","stringify","fetch","method","body","headers","Authorization","Accept","then","response","json","catch","error","TO_RADIANS","Math","PI","cropImage","async","image","file","crop","withUrl","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","ctx","getContext","floor","scale","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","rotate","drawImage","Promise","resolve","reject","toBlob","blob","blobUrl","revokeUrl","name","lastModified","URL","createObjectURL","revokeObjectURL","Error","type","getBlobFromCanvas","EditarArchivoFlujo","history","useHistory","location","useLocation","session","useSession","setCrop","useState","completedCrop","setCompletedCrop","previewCanvasRef","useRef","imgRef","imgSrc","setImgSrc","ArchivoOriginal","aspect","setAspect","undefined","setScale","setRotate","imagenes","setImagenes","direcciones","setDirecciones","mostrarMensaje","setMostrarMensaje","deshabilitarCortar","setDeshabilitarCortar","deshabilitarGenerar","setDeshabilitarGenerar","deshabilitarLimpiar","setDeshabilitarLimpiar","mostrarCargando","setMostrarCargando","GuardarPdf","setTimeout","FormData","nombre","length","result","characters","largo","i","push","charAt","random","join","crearid","pago","fileModificado","doc","jsPDF","compress","contador","forEach","item","imagen","Image","src","imgProps","getImageProperties","imgWidth","internal","pageSize","getWidth","imgHeight","getHeight","addPage","addImage","output","generarPDF","append","status","id","api_token","response2","pathname","grupo","estado","fn","waitTime","deps","useEffect","mounted","current","restore","canvasPreview","t","apply","clearTimeout","style","flexDirection","marginLeft","Button","variant","size","onClick","display","gap","justifyContent","overflow","onChange","_","percentCrop","onComplete","c","ref","alt","transform","onLoad","e","currentTarget","mediaWidth","mediaHeight","centerCrop","makeAspectCrop","unit","centerAspectCrop","disabled","img1","crossOrigin","croppedBlob","GuardarCorte","Spinner","animation","className","Alert","Boolean","border","objectFit","map","filter","goBack"],"mappings":"6KAAA,wCAAMA,EAAG,UAAMC,sCAAN,iBAEF,SAASC,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAWX,EACXY,EAAW,GAEf,IAAIC,EAAQ,CACVC,gBAAiBX,EACjBY,SAAUX,EACVY,WAAYX,EACZC,YAAaA,EACbC,SAAUA,EACVC,eAAgBA,EAChBC,OAAQA,EACRQ,IAAI,GAAD,OAAKhB,0CAEV,MAAMiB,EAAOC,KAAKC,UAAUP,GAO5B,MALuB,KAAnBV,GAAoC,KAAXM,IAC3BG,GAAY,IAAMT,EAAiB,IAAMM,GAE3CE,GAAYC,EAELS,MAAMV,EAAU,CACrBW,OAAQ,OACRC,KAAML,EACNM,QAAS,CACPC,cAAe,UAAYf,EAC3BgB,OAAQ,mBACR,eAAgB,oCAGjBC,MAAMC,GAAaA,EAASC,SAC5BF,MAAMC,GACEA,IAERE,OAAOC,GAAUA,M,4JC3CtB,MAAMC,EAAaC,KAAKC,GAAK,ICkEdC,MA/CGC,MAAOC,EAAOC,EAAMC,EAAMC,GAAU,KACpD,MAAMC,EAASC,SAASC,cAAc,UAChCX,EAAaC,KAAKC,GAAK,IAEvBU,EAASP,EAAMQ,aAAeR,EAAMS,MACpCC,EAASV,EAAMW,cAAgBX,EAAMY,OACrCC,EAAaC,OAAOC,iBACpBC,EAAMZ,EAAOa,WAAW,MAE9Bb,EAAOK,MAAQb,KAAKsB,MAAMhB,EAAKO,MAAQF,EAASM,GAChDT,EAAOQ,OAAShB,KAAKsB,MAAMhB,EAAKU,OAASF,EAASG,GAElDG,EAAIG,MAAMN,EAAYA,GACtBG,EAAII,sBAAwB,OAE5B,MAAMC,EAAQnB,EAAKoB,EAAIf,EACjBgB,EAAQrB,EAAKsB,EAAId,EAEjBe,EAAa,EAAI9B,EACjB+B,EAAU1B,EAAMQ,aAAe,EAC/BmB,EAAU3B,EAAMW,cAAgB,EAwBtC,OAtBAK,EAAIY,OACJZ,EAAIa,WAAWR,GAAQE,GAEvBP,EAAIa,UAAUH,EAASC,GAEvBX,EAAIc,OAAOL,GAEXT,EAAIG,MAAM,EAAG,GAEbH,EAAIa,WAAWH,GAAUC,GACzBX,EAAIe,UACF/B,EACA,EACA,EACAA,EAAMQ,aACNR,EAAMW,cACN,EACA,EACAX,EAAMQ,aACNR,EAAMW,oBA9DgB,EAACP,EAAQH,EAAME,IACvC,IAAI6B,SAAQ,CAACC,EAASC,KACpB9B,EAAO+B,QAAQC,IACb,GAAIA,EAAM,CAIR,IAAIC,EAASC,EAHbF,EAAKG,KAAOtC,EAAKsC,KACjBH,EAAKI,aAAevC,EAAKuC,aAIrBrC,IACFkC,EAAUI,IAAIC,gBAAgBN,GAC9BE,EAAY,IAAMG,IAAIE,gBAAgBN,IAGxCJ,EAAQ,CAAEG,OAAMC,UAASC,mBAEzBJ,EAAO,IAAIU,MAAM,sBAElB3C,EAAK4C,SA+CGC,CAAkB1C,EAAQH,EAAME,I,iBCwShC4C,UA9UY,KACzB,MAAMC,EAAUC,cACVC,EAAWC,eACX,QAAEC,GAAYC,qBAAW,wBACxBnD,EAAMoD,GAAWC,sBACjBC,EAAeC,GAAoBF,qBACpCG,EAAmBC,mBACnBC,EAASD,oBACRE,EAAQC,GAAaP,mBAASL,EAASa,kBACvCC,EAAQC,GAAaV,wBAASW,IAC9B/C,EAAOgD,GAAYZ,mBAAS,IAC5BzB,EAAQsC,GAAab,mBAAS,IAC9Bc,EAAUC,GAAef,mBAAS,KAClCgB,EAAaC,GAAkBjB,mBAAS,KACxCkB,EAAgBC,GAAqBnB,oBAAS,IAC9CoB,EAAoBC,GAAyBrB,oBAAS,IACtDsB,EAAqBC,GAA0BvB,oBAAS,IACxDwB,EAAqBC,GAA0BzB,oBAAS,IACxD0B,EAAiBC,GAAsB3B,oBAAS,GAuFvDxD,eAAeoF,IACbD,GAAmB,GACnBN,GAAsB,GACtBE,GAAuB,GACvBE,GAAuB,GACvBI,YAAW,KACT,MAAMvG,EAAO,IAAIwG,SACjB,IAAIC,EApCR,SAAiBC,GAIf,IAHA,IAAIC,EAAS,GACTC,EAAa,iEACbC,EAAQD,EAAWF,OACdI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,EAAOI,KAAKH,EAAWI,OAAOjG,KAAKsB,MAAMtB,KAAKkG,SAAWJ,KAE3D,OAAOF,EAAOO,KAAK,IA6BJC,CAAQ,GAAK,IAAM9C,EAAS+C,KAAO,OAC5CC,EA3BR,WACE,MAAMC,EAAM,IAAIC,IAAM,CAAEC,UAAU,IAClC,IAAIC,EAAW,EAcf,OAbA/B,EAAYgC,SAASC,IACnBF,IACA,IAAIG,EAAS,IAAIC,MACjBD,EAAOE,IAAMH,EACb,MAAMI,EAAWT,EAAIU,mBAAmBJ,GACxC,IAAIK,EAAWX,EAAIY,SAASC,SAASC,WAAa,EAE9CC,GADaf,EAAIY,SAASC,SAASG,YACtBP,EAAShG,OAASkG,EAAYF,EAASnG,OACpD6F,EAAW,GACbH,EAAIiB,UAENjB,EAAIkB,SAASZ,EAAQ,OAAQ,EAAG,EAAGK,EAAUI,EAAW,GAAI,WAEvDf,EAAImB,OAAO,QAWKC,GACrB1I,EAAK2I,OAAO,QAAStB,GACrBrH,EAAK2I,OAAO,UAAWlC,GACvBtG,MAAM,GAAD,OAAIpB,kDAAJ,cAAmD,CACtDqB,OAAQ,OACRC,KAAML,IAELS,MAAK,SAAUC,GACd,GAAwB,MAApBA,EAASkI,OAMX,OALAhE,EAAiB,MACjBH,EAAQ,MACRgB,EAAY,IACZE,EAAe,IAER3G,YACLqF,EAASzE,gBACTyE,EAASxE,SACT0E,EAAQsE,GACR,GACA,GACApC,EACA,IACAlC,EAAQuE,cAIbrI,MAAK,SAAUsI,GACG,MAAbA,GACF5E,EAAQ4C,KAAK,CACXiC,SAAU,sBACVnJ,SAAUwE,EAASxE,SACnBuH,KAAM/C,EAAS+C,KACf6B,MAAO5E,EAAS4E,MAChBC,OAAQ7E,EAAS6E,YAItBtI,OAAOC,GAAUA,MACnB,KChLA,IAA2BsI,EAAgBC,EAAkBC,EDqNlE,OAlCAC,qBAAU,KACR,IAAIC,GAAU,EACd,MAAO,IAAOA,GAAU,IACvB,ICtL6BJ,EDyL9BjI,WAEiB,OAAbyD,QAAa,IAAbA,OAAA,EAAAA,EAAe/C,SAAf,OACA+C,QADA,IACAA,OADA,EACAA,EAAe5C,SACfgD,EAAOyE,SACP3E,EAAiB2E,UAIb7E,EAAc5C,OAAS,KACzB8D,GAAkB,GAClBE,GAAsB,GACtBE,GAAuB,GACvBE,GAAuB,KAEvBN,GAAkB,GAClBE,GAAsB,GAClBL,EAAYgB,OAAS,IACvBT,GAAuB,GACvBE,GAAuB,KF1M5BjF,eACLC,EACAI,EACAF,EACAiB,EAAQ,EACRW,EAAS,GAET,MAAMd,EAAMZ,EAAOa,WAAW,MAE9B,IAAKD,EACH,MAAM,IAAI4B,MAAM,iBAGlB,MAAMrC,EAASP,EAAMQ,aAAeR,EAAMS,MACpCC,EAASV,EAAMW,cAAgBX,EAAMY,OAKrCC,EAAaC,OAAOC,iBAG1BX,EAAOK,MAAQb,KAAKsB,MAAMhB,EAAKO,MAAQF,EAASM,GAChDT,EAAOQ,OAAShB,KAAKsB,MAAMhB,EAAKU,OAASF,EAASG,GAElDG,EAAIG,MAAMN,EAAYA,GACtBG,EAAII,sBAAwB,OAE5B,MAAMC,EAAQnB,EAAKoB,EAAIf,EACjBgB,EAAQrB,EAAKsB,EAAId,EAEjBe,EAAaK,EAASnC,EACtB+B,EAAU1B,EAAMQ,aAAe,EAC/BmB,EAAU3B,EAAMW,cAAgB,EAEtCK,EAAIY,OAGJZ,EAAIa,WAAWR,GAAQE,GAEvBP,EAAIa,UAAUH,EAASC,GAEvBX,EAAIc,OAAOL,GAEXT,EAAIG,MAAMA,EAAOA,GAEjBH,EAAIa,WAAWH,GAAUC,GACzBX,EAAIe,UACF/B,EACA,EACA,EACAA,EAAMQ,aACNR,EAAMW,cACN,EACA,EACAX,EAAMQ,aACNR,EAAMW,eAGRK,EAAIsH,UEkJEC,CAAc3E,EAAOyE,QAAS3E,EAAiB2E,QAAS7E,EAAerC,EAAOW,KC/MpCmG,EDkN9C,IClNgEC,EDmNhE,CAAC1E,EAAerC,EAAOW,GClNzBqG,qBAAU,KACR,MAAMK,EAAIpD,YAAW,KACnB4C,EAAGS,WAAMvE,EAAWgE,KACnBD,GAEH,MAAO,KACLS,aAAaF,MAEdN,GD4MC9E,EACEF,EAASzE,gBAET,sBAAKkK,MAAO,CAAEC,cAAe,OAA7B,UACE,qBAAKD,MAAO,CAAElI,MAAO,MAAOoI,WAAY,QAAxC,SACE,eAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLC,QAAS,IACPjG,EAAQ4C,KAAK,CACXiC,SAAU,sBACVnJ,SAAUwE,EAASxE,SACnBuH,KAAM/C,EAAS+C,KACf6B,MAAO5E,EAAS4E,MAChBC,OAAQ7E,EAAS6E,SATvB,UAaE,cAAC,IAAD,IAbF,wBAiBF,uBACA,uBACA,cAAC,IAAD,UACE,sBACEY,MAAO,CAAElI,MAAO,MAAOyI,QAAS,OAAQC,IAAK,OAAQC,eAAgB,cADvE,UAGE,qBAAKT,MAAO,CAAElI,MAAO,MAAOG,OAAQ,QAASyI,SAAU,QAAvD,SACE,cAAC,IAAD,CACEnJ,KAAMA,EACNoJ,SAAU,CAACC,EAAGC,IAAgBlG,EAAQkG,GACtCC,WAAaC,GAAMjG,EAAiBiG,GACpC1F,OAAQA,EAJV,SAME,qBACE2F,IAAK/F,EACLgG,IAAI,UACJjD,IAAK9C,EACL8E,MAAO,CAAEkB,UAAU,SAAD,OAAW1I,EAAX,oBAA4BW,EAA5B,SAClBgI,OAhNlB,SAAqBC,GACnB,GAAI/F,EAAQ,CACV,MAAM,MAAEvD,EAAF,OAASG,GAAWmJ,EAAEC,cAC5B1G,EAIJ,SAA0B2G,EAAoBC,EAAqBlG,GACjE,OAAOmG,qBACLC,yBACE,CACEC,KAAM,IACN5J,MAAO,IAETuD,EACAiG,EACAC,GAEFD,EACAC,GAhBQI,CAAiB7J,EAAOG,EAAQoD,YAiNhC,sBAAK2E,MAAO,CAAElI,MAAO,OAArB,UACE,cAACqI,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLuB,SAAU5F,EACVsE,QAAS,MAlMzBlJ,iBACE,IAAIyK,EAAO,IAAI9D,MACf8D,EAAK7D,IAAM9C,EACX2G,EAAKC,YAAc,YACnB,MAAQrI,KAAMsI,EAAR,QAAqBrI,EAArB,UAA8BC,SAAoBxC,EACtD8D,EAAOyE,QACPzE,EAAOyE,QACP7E,GACA,GAEFc,EAAY,IAAID,EAAUqG,IAC1BlG,EAAe,IAAID,EAAalC,IAChCyC,GAAuB,GACvBE,GAAuB,GAsLP2F,IALJ,oBASU,IACV,cAAC7B,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLuB,SAAU1F,EACVoE,QAAS,KACP9D,KALJ,+BASU,IACV,cAAC2D,EAAA,EAAD,CACEC,QAAQ,SACRC,KAAK,KACLuB,SAAUxF,EACVkE,QAAS,KArMvBxF,EAAiB,MACjBH,EAAQ,MACRgB,EAAY,IACZE,EAAe,IACfM,GAAuB,GACvBE,GAAuB,IA4LX,qBAUA,uBACA,cAAC4F,EAAA,EAAD,CAASC,UAAU,SAASC,UAAY7F,EAA6B,GAAX,WAC1D,cAAC8F,EAAA,EAAD,CAAOhC,QAAQ,SAAS+B,UAAYrG,EAA4B,GAAX,SAArD,SAEI,mHAGJ,uBACA,8BACGuG,QAAQxH,IACP,wBACEmG,IAAKjG,EACLiF,MAAO,CACLsC,OAAQ,kBACRC,UAAW,UACXzK,MAAO+C,EAAc/C,MACrBG,OAAQ4C,EAAc5C,YAK9B,qBAAK+H,MAAO,CAAE/H,OAAQ,QAASyI,SAAU,QAAzC,SACG9E,EAAY4G,KAAI,CAAC3E,EAAMb,IAEpB,qCACE,gCACE,uBACA,sBAAmBgD,MAAO,CAAEO,QAAS,QAArC,UACE,qBAAmBP,MAAO,CAAElI,MAAO,OAAnC,SACE,4CAA2BkF,EAAI,IAAtBA,EAAI,MADLA,EAAI,KAGd,qBAAmBgD,MAAO,CAAElI,MAAO,OAAnC,SACE,cAACqI,EAAA,EAAD,CACEC,QAAQ,SACRC,KAAK,KACLC,QAAS,KAtOvC,IAAkBxC,IAuOuBD,EAtOvChC,EAAe,IACVD,EAAY6G,QAAO,SAAU5E,GAC9B,OAAOA,IAASC,QAgOM,SAOE,cAAC,IAAD,OARMd,EAAI,OAJNA,EAAI,KAgBd,uBACA,qBAAagB,IAAKH,EAAMmC,MAAO,CAAElI,MAAO,QAA9BkF,GACV,yBApBQA,EAAI,KAsBd,0CAWlB3C,EAAQqI,SAEN,qBAAKP,UAAU,aAAf,wFAMJ9H,EAAQ4C,KAAK,KACN,qBAAKkF,UAAU,aAAf","file":"static/js/76.423fafa2.chunk.js","sourcesContent":["const API = `${process.env.REACT_APP_API_URL}archivosflujo`\n\nexport function postArchivoFlujo(\n  idArchivoFlujo,\n  idFlujo,\n  idUsuario,\n  descripcion,\n  archivos,\n  nombre_archivo,\n  opcion,\n  token,\n) {\n  let ApiFinal = API\n  let ApiWhere = ''\n\n  var datos = {\n    id_archivoflujo: idArchivoFlujo,\n    id_flujo: idFlujo,\n    id_usuario: idUsuario,\n    descripcion: descripcion,\n    archivos: archivos,\n    nombre_archivo: nombre_archivo,\n    opcion: opcion,\n    url: `${process.env.REACT_APP_URL_ARCHIVOS}`,\n  }\n  const data = JSON.stringify(datos)\n\n  if (idArchivoFlujo !== '' && opcion !== '') {\n    ApiWhere += '/' + idArchivoFlujo + '/' + opcion\n  }\n  ApiFinal += ApiWhere\n\n  return fetch(ApiFinal, {\n    method: 'POST',\n    body: data,\n    headers: {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json',\n      'Content-type': 'application/json;charset=UTF-8',\n    },\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      return response\n    })\n    .catch((error) => error)\n}\n","import { PixelCrop } from 'react-image-crop'\n\nconst TO_RADIANS = Math.PI / 180\n\nexport async function canvasPreview(\n  image: HTMLImageElement,\n  canvas: HTMLCanvasElement,\n  crop: PixelCrop,\n  scale = 1,\n  rotate = 0,\n) {\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    throw new Error('No 2d context')\n  }\n\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n  const pixelRatio = window.devicePixelRatio\n  // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\n\n  ctx.scale(pixelRatio, pixelRatio)\n  ctx.imageSmoothingQuality = 'high'\n\n  const cropX = crop.x * scaleX\n  const cropY = crop.y * scaleY\n\n  const rotateRads = rotate * TO_RADIANS\n  const centerX = image.naturalWidth / 2\n  const centerY = image.naturalHeight / 2\n\n  ctx.save()\n\n  // 5) Move the crop origin to the canvas origin (0,0)\n  ctx.translate(-cropX, -cropY)\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY)\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads)\n  // 2) Scale the image\n  ctx.scale(scale, scale)\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY)\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n  )\n\n  ctx.restore()\n}\n","const getBlobFromCanvas = (canvas, file, withUrl) =>\n  new Promise((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        blob.name = file.name\n        blob.lastModified = file.lastModified\n\n        let blobUrl, revokeUrl\n\n        if (withUrl) {\n          blobUrl = URL.createObjectURL(blob)\n          revokeUrl = () => URL.revokeObjectURL(blobUrl)\n        }\n\n        resolve({ blob, blobUrl, revokeUrl })\n      } else {\n        reject(new Error('Canvas is empty'))\n      }\n    }, file.type)\n  })\n\nconst cropImage = async (image, file, crop, withUrl = false) => {\n  const canvas = document.createElement('canvas')\n  const TO_RADIANS = Math.PI / 180\n\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  const pixelRatio = window.devicePixelRatio\n  const ctx = canvas.getContext('2d')\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\n\n  ctx.scale(pixelRatio, pixelRatio)\n  ctx.imageSmoothingQuality = 'high'\n\n  const cropX = crop.x * scaleX\n  const cropY = crop.y * scaleY\n\n  const rotateRads = 0 * TO_RADIANS\n  const centerX = image.naturalWidth / 2\n  const centerY = image.naturalHeight / 2\n\n  ctx.save()\n  ctx.translate(-cropX, -cropY)\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY)\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads)\n  // 2) Scale the image\n  ctx.scale(1, 1)\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY)\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n  )\n\n  return await getBlobFromCanvas(canvas, file, withUrl)\n}\n\nexport default cropImage\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { useSession } from 'react-use-session'\nimport { Alert, Button, Spinner } from 'react-bootstrap'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { postArchivoFlujo } from '../../../../services/postArchivoFlujo'\nimport { FiUser, FiFile, FiDownloadCloud, FiSettings } from 'react-icons/fi'\nimport { FaArrowLeft, FaTrash } from 'react-icons/fa'\nimport '../../../../scss/estilos.scss'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CContainer,\n  CForm,\n  CInputGroupText,\n  CFormControl,\n  CInputGroup,\n  CFormSelect,\n} from '@coreui/react'\nimport ReactCrop, { centerCrop, makeAspectCrop, Crop, PixelCrop } from 'react-image-crop'\nimport 'react-image-crop/dist/ReactCrop.css'\nimport { canvasPreview } from './canvasPreview'\nimport { useDebounceEffect } from './useDebounceEffect'\nimport cropImage from './cropImage'\nimport { jsPDF } from 'jspdf'\n//Agregar la validación al botón de generar\n//Desactivar botones y agregar loading al momento de generar el archivo\nconst EditarArchivoFlujo = () => {\n  const history = useHistory()\n  const location = useLocation()\n  const { session } = useSession('PendrogonIT-Session')\n  const [crop, setCrop] = useState()\n  const [completedCrop, setCompletedCrop] = useState()\n  const previewCanvasRef = useRef()\n  const imgRef = useRef()\n  const [imgSrc, setImgSrc] = useState(location.ArchivoOriginal)\n  const [aspect, setAspect] = useState(undefined)\n  const [scale, setScale] = useState(1)\n  const [rotate, setRotate] = useState(0)\n  const [imagenes, setImagenes] = useState([])\n  const [direcciones, setDirecciones] = useState([])\n  const [mostrarMensaje, setMostrarMensaje] = useState(false)\n  const [deshabilitarCortar, setDeshabilitarCortar] = useState(false)\n  const [deshabilitarGenerar, setDeshabilitarGenerar] = useState(true)\n  const [deshabilitarLimpiar, setDeshabilitarLimpiar] = useState(true)\n  const [mostrarCargando, setMostrarCargando] = useState(false)\n\n  function onImageLoad(e: React.SyntheticEvent<HTMLImageElement>) {\n    if (aspect) {\n      const { width, height } = e.currentTarget\n      setCrop(centerAspectCrop(width, height, aspect))\n    }\n  }\n\n  function centerAspectCrop(mediaWidth: number, mediaHeight: number, aspect: number) {\n    return centerCrop(\n      makeAspectCrop(\n        {\n          unit: '%',\n          width: 90,\n        },\n        aspect,\n        mediaWidth,\n        mediaHeight,\n      ),\n      mediaWidth,\n      mediaHeight,\n    )\n  }\n\n  async function GuardarCorte() {\n    var img1 = new Image()\n    img1.src = imgSrc\n    img1.crossOrigin = 'anonymous'\n    const { blob: croppedBlob, blobUrl, revokeUrl } = await cropImage(\n      imgRef.current,\n      imgRef.current,\n      completedCrop,\n      true,\n    )\n    setImagenes([...imagenes, croppedBlob])\n    setDirecciones([...direcciones, blobUrl])\n    setDeshabilitarGenerar(false)\n    setDeshabilitarLimpiar(false)\n  }\n\n  function Limpiar() {\n    setCompletedCrop(null)\n    setCrop(null)\n    setImagenes([])\n    setDirecciones([])\n    setDeshabilitarGenerar(true)\n    setDeshabilitarLimpiar(true)\n  }\n\n  function Eliminar(imagen) {\n    setDirecciones([\n      ...direcciones.filter(function (item) {\n        return item !== imagen\n      }),\n    ])\n  }\n\n  function crearid(length) {\n    var result = []\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    var largo = characters.length\n    for (var i = 0; i < length; i++) {\n      result.push(characters.charAt(Math.floor(Math.random() * largo)))\n    }\n    return result.join('')\n  }\n\n  function generarPDF() {\n    const doc = new jsPDF({ compress: true })\n    let contador = 0\n    direcciones.forEach((item) => {\n      contador++\n      var imagen = new Image()\n      imagen.src = item\n      const imgProps = doc.getImageProperties(imagen)\n      let imgWidth = doc.internal.pageSize.getWidth() - 5\n      let pageHeight = doc.internal.pageSize.getHeight()\n      let imgHeight = (imgProps.height * imgWidth) / imgProps.width\n      if (contador > 1) {\n        doc.addPage()\n      }\n      doc.addImage(imagen, 'PNG', -1, 0, imgWidth, imgHeight, '', 'FAST')\n    })\n    return doc.output('blob')\n  }\n\n  async function GuardarPdf() {\n    setMostrarCargando(true)\n    setDeshabilitarCortar(false)\n    setDeshabilitarGenerar(true)\n    setDeshabilitarLimpiar(true)\n    setTimeout(() => {\n      const data = new FormData()\n      let nombre = crearid(6) + '_' + location.pago + '.pdf'\n      let fileModificado = generarPDF()\n      data.append('image', fileModificado)\n      data.append('prefijo', nombre)\n      fetch(`${process.env.REACT_APP_BACKEND_URL}upload.php`, {\n        method: 'POST',\n        body: data,\n      })\n        .then(function (response) {\n          if (response.status === 200) {\n            setCompletedCrop(null)\n            setCrop(null)\n            setImagenes([])\n            setDirecciones([])\n\n            return postArchivoFlujo(\n              location.id_archivoflujo,\n              location.id_flujo,\n              session.id,\n              '',\n              '',\n              nombre,\n              '2',\n              session.api_token,\n            )\n          }\n        })\n        .then(function (response2) {\n          if (response2 == 'OK') {\n            history.push({\n              pathname: '/archivoflujo/nuevo',\n              id_flujo: location.id_flujo,\n              pago: location.pago,\n              grupo: location.grupo,\n              estado: location.estado,\n            })\n          }\n        })\n        .catch((error) => error)\n    }, 3000)\n  }\n\n  useEffect(() => {\n    let mounted = true\n    return () => (mounted = false)\n  }, [])\n\n  useDebounceEffect(\n    async () => {\n      if (\n        completedCrop?.width &&\n        completedCrop?.height &&\n        imgRef.current &&\n        previewCanvasRef.current\n      ) {\n        // We use canvasPreview as it's much faster than imgPreview.\n\n        if (completedCrop.height > 657) {\n          setMostrarMensaje(true)\n          setDeshabilitarCortar(true)\n          setDeshabilitarGenerar(true)\n          setDeshabilitarLimpiar(true)\n        } else {\n          setMostrarMensaje(false)\n          setDeshabilitarCortar(false)\n          if (direcciones.length > 0) {\n            setDeshabilitarGenerar(false)\n            setDeshabilitarLimpiar(false)\n          }\n        }\n        canvasPreview(imgRef.current, previewCanvasRef.current, completedCrop, scale, rotate)\n      }\n    },\n    100,\n    [completedCrop, scale, rotate],\n  )\n  if (session) {\n    if (location.id_archivoflujo) {\n      return (\n        <div style={{ flexDirection: 'row' }}>\n          <div style={{ width: '25%', marginLeft: '10px' }}>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={() =>\n                history.push({\n                  pathname: '/archivoflujo/nuevo',\n                  id_flujo: location.id_flujo,\n                  pago: location.pago,\n                  grupo: location.grupo,\n                  estado: location.estado,\n                })\n              }\n            >\n              <FaArrowLeft />\n              &nbsp;&nbsp;Regresar\n            </Button>\n          </div>\n          <br />\n          <br />\n          <CContainer>\n            <div\n              style={{ width: '95%', display: 'flex', gap: '10px', justifyContent: 'flex-start' }}\n            >\n              <div style={{ width: '50%', height: '800px', overflow: 'auto' }}>\n                <ReactCrop\n                  crop={crop}\n                  onChange={(_, percentCrop) => setCrop(percentCrop)}\n                  onComplete={(c) => setCompletedCrop(c)}\n                  aspect={aspect}\n                >\n                  <img\n                    ref={imgRef}\n                    alt=\"Crop me\"\n                    src={imgSrc}\n                    style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\n                    onLoad={onImageLoad}\n                  />\n                </ReactCrop>\n              </div>\n              <div style={{ width: '50%' }}>\n                <Button\n                  variant=\"success\"\n                  size=\"sm\"\n                  disabled={deshabilitarCortar}\n                  onClick={() => {\n                    GuardarCorte()\n                  }}\n                >\n                  Cortar\n                </Button>{' '}\n                <Button\n                  variant=\"primary\"\n                  size=\"sm\"\n                  disabled={deshabilitarGenerar}\n                  onClick={() => {\n                    GuardarPdf()\n                  }}\n                >\n                  Generar documento\n                </Button>{' '}\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  disabled={deshabilitarLimpiar}\n                  onClick={() => {\n                    Limpiar()\n                  }}\n                >\n                  Limpiar\n                </Button>\n                <br />\n                <Spinner animation=\"border\" className={!mostrarCargando ? 'd-none' : ''} />\n                <Alert variant=\"danger\" className={!mostrarMensaje ? 'd-none' : ''}>\n                  {\n                    'El área seleccionada es más grande que una página, por favor seleccione un área más pequeña.'\n                  }\n                </Alert>\n                <br />\n                <div>\n                  {Boolean(completedCrop) && (\n                    <canvas\n                      ref={previewCanvasRef}\n                      style={{\n                        border: '1px solid black',\n                        objectFit: 'contain',\n                        width: completedCrop.width,\n                        height: completedCrop.height,\n                      }}\n                    />\n                  )}\n                </div>\n                <div style={{ height: '400px', overflow: 'auto' }}>\n                  {direcciones.map((item, i) => {\n                    return (\n                      <>\n                        <div key={i + 100}>\n                          <br />\n                          <div key={i + 200} style={{ display: 'flex' }}>\n                            <div key={i + 300} style={{ width: '50%' }}>\n                              <h2 key={i + 1000}>Página {i + 1}</h2>\n                            </div>\n                            <div key={i + 400} style={{ width: '50%' }}>\n                              <Button\n                                variant=\"danger\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  Eliminar(item)\n                                }}\n                              >\n                                <FaTrash />\n                              </Button>\n                            </div>\n                          </div>\n                          <br />\n                          <img key={i} src={item} style={{ width: '50%' }} />\n                          <br />\n                        </div>\n                        <br />\n                      </>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          </CContainer>\n        </div>\n      )\n    } else {\n      history.goBack()\n      return (\n        <div className=\"sin-sesion\">\n          NO SE CARGÓ EL CÓDIGO DEL ARCHIVO. REGRESE A LA PANTALLA DE PAGOS.\n        </div>\n      )\n    }\n  } else {\n    history.push('/')\n    return <div className=\"sin-sesion\">SIN SESIÓN ACTIVA.</div>\n  }\n}\n\nexport default EditarArchivoFlujo\n","import { useEffect, DependencyList } from 'react'\n\nexport function useDebounceEffect(fn: () => void, waitTime: number, deps?: DependencyList) {\n  useEffect(() => {\n    const t = setTimeout(() => {\n      fn.apply(undefined, deps)\n    }, waitTime)\n\n    return () => {\n      clearTimeout(t)\n    }\n  }, deps)\n}\n"],"sourceRoot":""}