{"version":3,"sources":["services/getReportesFlujos.js","services/getDatosSemaforoIndividual.js","views/dashboard/Dashboard.js"],"names":["API","process","getReportesFlujos","opcion","year","mes","token","ApiFinal","ApiWhere","fetch","method","headers","Authorization","Accept","then","response","json","catch","error","getDatosSemaforoIndividual","idUsuario","tipo","datos","id_usuario","data","JSON","stringify","body","Dashboard","history","useHistory","time","setTime","useState","session","clear","useSession","mensaje","setMensaje","results","setList","estados","setEstados","pagos","setPagos","tipos","setTipos","promedioT","setPromedioT","estadosLabel","setEstadosLabel","semaforos","setSemaforos","semaforosNom","setSemaforosNom","semaforosIndividualB","setSemaforosIndividualB","semaforosNomIndividualB","setSemaforosNomIndividualB","semaforosIndividualT","setSemaforosIndividualT","semaforosNomIndividualT","setSemaforosNomIndividualT","semaforosIndividualI","setSemaforosIndividualI","semaforosNomIndividualI","setSemaforosNomIndividualI","PagosTotales","setPagosTotales","PagosTotalesIndividualB","setPagosTotalesIndividualB","PagosTotalesIndividualT","setPagosTotalesIndividualT","PagosTotalesIndividualI","setPagosTotalesIndividualI","years","setYears","show","setShow","form","setValues","useEffect","labelestados","labeltipos","i","push","api_token","items","pago","flujos","parseInt","CantidadEstados","estado","PagosAprobados","promedioPorNivel","nombreEstadoOrigen","nombreEstadoDestino","contador","cantidad","nombreSemaforo","id","interval","setInterval","clearInterval","handleInput","event","target","name","value","filtrar","async","className","style","marginBottom","marginLeft","marginRight","onChange","map","item","Button","color","title","onClick","xs","height","labels","datasets","backgroundColor","options","plugins","display","text","font","weight","position","legend","Tabs","defaultActiveKey","Tab","eventKey","e","a","length","colorFiltro","index","pathname","marginTop","hoverBackgroundColor","label"],"mappings":"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","file":"static/js/121.a3af2036.chunk.js","sourcesContent":["const API = `${process.env.REACT_APP_API_URL}reportesflujos`\n\nexport function getReportesFlujos(opcion, year, mes, token) {\n  let ApiFinal = API\n  let ApiWhere = ''\n  if (opcion !== null && year !== null && mes !== null) {\n    ApiWhere += '/' + opcion + '/' + year + '/' + mes\n  }\n  ApiFinal += ApiWhere\n  return fetch(ApiFinal, {\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json',\n    },\n  })\n    .then(function (response) {\n      return response.json()\n    })\n    .catch((error) => error)\n}\n","const API = `${process.env.REACT_APP_API_URL}semaforoindividual`\n\nexport function getDatosSemaforoIndividual(idUsuario, tipo, token) {\n  let ApiFinal = API\n\n  var datos = {\n    id_usuario: idUsuario,\n    tipo: tipo,\n  }\n  const data = JSON.stringify(datos)\n\n  return fetch(ApiFinal, {\n    method: 'POST',\n    body: data,\n    headers: {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json',\n      'Content-type': 'application/json;charset=UTF-8',\n    },\n  })\n    .then(function (response) {\n      return response.json()\n    })\n    .catch((error) => error)\n}\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CCardHeader, CRow, CFormSelect } from '@coreui/react'\nimport { CChartBar, CChartDoughnut, CChartPie } from '@coreui/react-chartjs'\nimport { useIdleTimer } from 'react-idle-timer'\nimport { Tab, Tabs, Modal, Button } from 'react-bootstrap'\nimport { useHistory } from 'react-router-dom'\nimport { postSesionUsuario } from '../../services/postSesionUsuario'\nimport { getReportesFlujos } from '../../services/getReportesFlujos'\nimport { getDatosSemaforoIndividual } from '../../services/getDatosSemaforoIndividual'\nimport { useSession } from 'react-use-session'\nimport { FaSearch } from 'react-icons/fa'\nimport '../../scss/estilos.scss'\n\nconst Dashboard = () => {\n  const history = useHistory()\n  const [time, setTime] = useState(null)\n  const { session, clear } = useSession('PendrogonIT-Session')\n  const [mensaje, setMensaje] = useState('')\n  const [results, setList] = useState([])\n  const [estados, setEstados] = useState([])\n  const [pagos, setPagos] = useState([])\n  const [tipos, setTipos] = useState([])\n  const [promedioT, setPromedioT] = useState([])\n  const [estadosLabel, setEstadosLabel] = useState([])\n  const [semaforos, setSemaforos] = useState([])\n  const [semaforosNom, setSemaforosNom] = useState([])\n  const [semaforosIndividualB, setSemaforosIndividualB] = useState([])\n  const [semaforosNomIndividualB, setSemaforosNomIndividualB] = useState([])\n  const [semaforosIndividualT, setSemaforosIndividualT] = useState([])\n  const [semaforosNomIndividualT, setSemaforosNomIndividualT] = useState([])\n  const [semaforosIndividualI, setSemaforosIndividualI] = useState([])\n  const [semaforosNomIndividualI, setSemaforosNomIndividualI] = useState([])\n  const [PagosTotales, setPagosTotales] = useState(0)\n  const [PagosTotalesIndividualB, setPagosTotalesIndividualB] = useState(0)\n  const [PagosTotalesIndividualT, setPagosTotalesIndividualT] = useState(0)\n  const [PagosTotalesIndividualI, setPagosTotalesIndividualI] = useState(0)\n  const [years, setYears] = useState([])\n  const [show, setShow] = useState(false)\n\n  const [form, setValues] = useState({\n    year: '0',\n    mes: '0',\n  })\n\n  useEffect(() => {\n    let estados = []\n    let labelestados = []\n    let pagos = []\n    let labeltipos = []\n    let promedioT = []\n    let estadosLabel = []\n    let semaforos = []\n    let semaforosNom = []\n    let years = []\n    for (var i = 0; i < 30; i++) {\n      years.push(2021 + i)\n    }\n    setYears(years)\n    getReportesFlujos('1', '0', '0', session.api_token).then((items) => {\n      for (const pago of items.flujos) {\n        estados.push(parseInt(pago.CantidadEstados))\n        labelestados.push(pago.estado)\n      }\n      setList(estados)\n      setEstados(labelestados)\n    })\n    getReportesFlujos('2', '0', '0', session.api_token).then((items) => {\n      for (const pago of items.flujos) {\n        pagos.push(parseInt(pago.PagosAprobados))\n        labeltipos.push(pago.tipo)\n      }\n      setPagos(pagos)\n      setTipos(labeltipos)\n    })\n    getReportesFlujos('3', '0', '0', session.api_token).then((items) => {\n      for (const pago of items.flujos) {\n        promedioT.push(parseInt(pago.promedioPorNivel))\n        estadosLabel.push(pago.nombreEstadoOrigen + '->' + pago.nombreEstadoDestino)\n      }\n      setPromedioT(promedioT)\n      setEstadosLabel(estadosLabel)\n    })\n    getReportesFlujos('4', '0', '0', session.api_token).then((items) => {\n      let contador = 0\n      for (const pago of items.flujos) {\n        semaforos.push(parseInt(pago.cantidad))\n        contador = contador + parseInt(pago.cantidad)\n        semaforosNom.push(pago.nombreSemaforo)\n      }\n      setPagosTotales(contador)\n      setSemaforos(semaforos)\n      setSemaforosNom(semaforosNom)\n    })\n\n    let semaforosIndividualB = []\n    let semaforosNomIndividualB = []\n    getDatosSemaforoIndividual(session.id, 'BANCARIO', session.api_token).then((items) => {\n      let contador = 0\n      for (const pago of items.flujos) {\n        semaforosIndividualB.push(parseInt(pago.cantidad))\n        contador = contador + parseInt(pago.cantidad)\n        semaforosNomIndividualB.push(pago.nombreSemaforo)\n      }\n      setPagosTotalesIndividualB(contador)\n      setSemaforosIndividualB(semaforosIndividualB)\n      setSemaforosNomIndividualB(semaforosNomIndividualB)\n    })\n\n    let semaforosIndividualT = []\n    let semaforosNomIndividualT = []\n    getDatosSemaforoIndividual(session.id, 'TRANSFERENCIA', session.api_token).then((items) => {\n      let contador = 0\n      for (const pago of items.flujos) {\n        semaforosIndividualT.push(parseInt(pago.cantidad))\n        contador = contador + parseInt(pago.cantidad)\n        semaforosNomIndividualT.push(pago.nombreSemaforo)\n      }\n      setPagosTotalesIndividualT(contador)\n      setSemaforosIndividualT(semaforosIndividualT)\n      setSemaforosNomIndividualT(semaforosNomIndividualT)\n    })\n\n    let semaforosIndividualI = []\n    let semaforosNomIndividualI = []\n    getDatosSemaforoIndividual(session.id, 'INTERNA', session.api_token).then((items) => {\n      let contador = 0\n      for (const pago of items.flujos) {\n        semaforosIndividualI.push(parseInt(pago.cantidad))\n        contador = contador + parseInt(pago.cantidad)\n        semaforosNomIndividualI.push(pago.nombreSemaforo)\n      }\n      setPagosTotalesIndividualI(contador)\n      setSemaforosIndividualI(semaforosIndividualI)\n      setSemaforosNomIndividualI(semaforosNomIndividualI)\n    })\n\n    const interval = setInterval(() => {\n      let estados = []\n      let labelestados = []\n      let pagos = []\n      let labeltipos = []\n      let promedioT = []\n      let semaforos = []\n      let semaforosNom = []\n      getReportesFlujos('1', '0', '0', session.api_token).then((items) => {\n        for (const pago of items.flujos) {\n          estados.push(parseInt(pago.CantidadEstados))\n          labelestados.push(pago.estado)\n        }\n        setList(estados)\n        setEstados(labelestados)\n      })\n      getReportesFlujos('2', '0', '0', session.api_token).then((items) => {\n        for (const pago of items.flujos) {\n          pagos.push(parseInt(pago.PagosAprobados))\n          labeltipos.push(pago.tipo)\n        }\n        setPagos(pagos)\n        setTipos(labeltipos)\n      })\n      getReportesFlujos('3', '0', '0', session.api_token).then((items) => {\n        for (const pago of items.flujos) {\n          promedioT.push(parseInt(pago.promedioPorNivel))\n        }\n        setPromedioT(promedioT)\n      })\n      getReportesFlujos('4', '0', '0', session.api_token).then((items) => {\n        let contador = 0\n        for (const pago of items.flujos) {\n          semaforos.push(parseInt(pago.cantidad))\n          contador = contador + parseInt(pago.cantidad)\n          semaforosNom.push(pago.nombreSemaforo)\n        }\n        setPagosTotales(contador)\n        setSemaforos(semaforos)\n        setSemaforosNom(semaforosNom)\n      })\n      let semaforosIndividualB = []\n      let semaforosNomIndividualB = []\n      getDatosSemaforoIndividual(session.id, 'BANCARIO', session.api_token).then((items) => {\n        let contador = 0\n        for (const pago of items.flujos) {\n          semaforosIndividualB.push(parseInt(pago.cantidad))\n          contador = contador + parseInt(pago.cantidad)\n          semaforosNomIndividualB.push(pago.nombreSemaforo)\n        }\n        setPagosTotalesIndividualB(contador)\n        setSemaforosIndividualB(semaforosIndividualB)\n        setSemaforosNomIndividualB(semaforosNomIndividualB)\n      })\n      let semaforosIndividualT = []\n      let semaforosNomIndividualT = []\n      getDatosSemaforoIndividual(session.id, 'TRANSFERENCIA', session.api_token).then((items) => {\n        let contador = 0\n        for (const pago of items.flujos) {\n          semaforosIndividualT.push(parseInt(pago.cantidad))\n          contador = contador + parseInt(pago.cantidad)\n          semaforosNomIndividualT.push(pago.nombreSemaforo)\n        }\n        setPagosTotalesIndividualT(contador)\n        setSemaforosIndividualT(semaforosIndividualT)\n        setSemaforosNomIndividualT(semaforosNomIndividualT)\n      })\n      let semaforosIndividualI = []\n      let semaforosNomIndividualI = []\n      getDatosSemaforoIndividual(session.id, 'INTERNA', session.api_token).then((items) => {\n        let contador = 0\n        for (const pago of items.flujos) {\n          semaforosIndividualI.push(parseInt(pago.cantidad))\n          contador = contador + parseInt(pago.cantidad)\n          semaforosNomIndividualI.push(pago.nombreSemaforo)\n        }\n        setPagosTotalesIndividualI(contador)\n        setSemaforosIndividualI(semaforosIndividualI)\n        setSemaforosNomIndividualI(semaforosNomIndividualI)\n      })\n    }, 900000)\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleInput = (event) => {\n    setValues({\n      ...form,\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  const filtrar = async () => {\n    let estados = []\n    let labelestados = []\n    let pagos = []\n    let labeltipos = []\n    let promedioT = []\n    let semaforos = []\n    let semaforosNom = []\n    getReportesFlujos('1', form.year, form.mes, session.api_token).then((items) => {\n      for (const pago of items.flujos) {\n        estados.push(parseInt(pago.CantidadEstados))\n        labelestados.push(pago.estado)\n      }\n      setList(estados)\n      setEstados(labelestados)\n    })\n    getReportesFlujos('2', form.year, form.mes, session.api_token).then((items) => {\n      for (const pago of items.flujos) {\n        pagos.push(parseInt(pago.PagosAprobados))\n        labeltipos.push(pago.tipo)\n      }\n      setPagos(pagos)\n      setTipos(labeltipos)\n    })\n    getReportesFlujos('3', form.year, form.mes, session.api_token).then((items) => {\n      for (const pago of items.flujos) {\n        promedioT.push(parseInt(pago.promedioPorNivel))\n      }\n      setPromedioT(promedioT)\n    })\n    getReportesFlujos('4', form.year, form.year, session.api_token).then((items) => {\n      let contador = 0\n      for (const pago of items.flujos) {\n        semaforos.push(parseInt(pago.cantidad))\n        contador = contador + parseInt(pago.cantidad)\n        semaforosNom.push(pago.nombreSemaforo)\n      }\n      setPagosTotales(contador)\n      setSemaforos(semaforos)\n      setSemaforosNom(semaforosNom)\n    })\n  }\n\n  if (session) {\n    return (\n      <>\n        <CRow>\n          <div className=\"div-search\" style={{ marginBottom: '20px' }}>\n            <CFormSelect\n              name=\"year\"\n              style={{ marginLeft: '51%', marginRight: '10px' }}\n              onChange={handleInput}\n            >\n              <option>Seleccione año</option>\n              {years.map((item, i) => {\n                return (\n                  <option key={i} value={item}>\n                    {item}\n                  </option>\n                )\n              })}\n            </CFormSelect>\n            <CFormSelect name=\"mes\" style={{ marginRight: '10px' }} onChange={handleInput}>\n              <option>Seleccione mes</option>\n              <option value=\"1\">Enero</option>\n              <option value=\"2\">Febrero</option>\n              <option value=\"3\">Marzo</option>\n              <option value=\"4\">Abril</option>\n              <option value=\"5\">Mayo</option>\n              <option value=\"6\">Junio</option>\n              <option value=\"7\">Julio</option>\n              <option value=\"8\">Agosto</option>\n              <option value=\"9\">Septiembre</option>\n              <option value=\"10\">Octubre</option>\n              <option value=\"11\">Noviembre</option>\n              <option value=\"12\">Diciembre</option>\n            </CFormSelect>\n            <Button\n              color=\"primary\"\n              className=\"search-button\"\n              title=\"Filtrar por año y mes\"\n              onClick={filtrar}\n            >\n              <FaSearch />\n            </Button>\n          </div>\n          <CCol xs={6}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>Semáforo de aprobación vs días de credito</CCardHeader>\n              <CCardBody style={{ height: '340px' }}>\n                <CChartBar\n                  height={195}\n                  data={{\n                    labels: semaforosNom,\n                    datasets: [\n                      {\n                        backgroundColor: ['#D02F2F', '#AF940B', '#428A49'],\n                        data: semaforos,\n                      },\n                    ],\n                  }}\n                  options={{\n                    plugins: {\n                      title: {\n                        display: true,\n                        text: 'Total de pagos: ' + PagosTotales,\n                        font: {\n                          weight: 'normal',\n                        },\n                        position: 'bottom',\n                      },\n                      legend: {\n                        display: false,\n                      },\n                    },\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs={6}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>Semáforo de aprobación vs días de credito personal</CCardHeader>\n              <CCardBody>\n                <Tabs defaultActiveKey=\"bancaria\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n                  <Tab eventKey=\"bancaria\" title=\"Bancaria\">\n                    <CChartBar\n                      data={{\n                        labels: semaforosNomIndividualB,\n                        datasets: [\n                          {\n                            backgroundColor: ['#D02F2F', '#AF940B', '#428A49'],\n                            data: semaforosIndividualB,\n                          },\n                        ],\n                      }}\n                      options={{\n                        plugins: {\n                          title: {\n                            display: true,\n                            text: 'Total de pagos: ' + PagosTotalesIndividualB,\n                            font: {\n                              weight: 'normal',\n                            },\n                            position: 'bottom',\n                          },\n                          legend: {\n                            display: false,\n                          },\n                        },\n                        onClick: (e, a) => {\n                          //console.log(e) //captura el evento\n                          //console.log(a) //captura el item de la grafica y devuelve array\n                          if (a.length > 0) {\n                            let colorFiltro = 'NO'\n                            if (a[0].index === 0) {\n                              colorFiltro = 'ROJO'\n                            }\n                            if (a[0].index === 1) {\n                              colorFiltro = 'AMARILLO'\n                            }\n                            if (a[0].index === 2) {\n                              colorFiltro = 'VERDE'\n                            }\n                            history.push({\n                              pathname: '/pagos/bancario',\n                              colorFiltro,\n                            })\n                          }\n                        },\n                      }}\n                    />\n                  </Tab>\n                  <Tab eventKey=\"transferencia\" title=\"Transferencia\">\n                    <CChartBar\n                      data={{\n                        labels: semaforosNomIndividualT,\n                        datasets: [\n                          {\n                            backgroundColor: ['#D02F2F', '#AF940B', '#428A49'],\n                            data: semaforosIndividualT,\n                          },\n                        ],\n                      }}\n                      options={{\n                        plugins: {\n                          title: {\n                            display: true,\n                            text: 'Total de pagos: ' + PagosTotalesIndividualT,\n                            font: {\n                              weight: 'normal',\n                            },\n                            position: 'bottom',\n                          },\n                          legend: {\n                            display: false,\n                          },\n                        },\n                        onClick: (e, a) => {\n                          //console.log(e) captura el evento\n                          //console.log(a) captura el item de la grafica y devuelve array\n                          if (a.length > 0) {\n                            let colorFiltro = 'NO'\n                            if (a[0].index === 0) {\n                              colorFiltro = 'ROJO'\n                            }\n                            if (a[0].index === 1) {\n                              colorFiltro = 'AMARILLO'\n                            }\n                            if (a[0].index === 2) {\n                              colorFiltro = 'VERDE'\n                            }\n                            history.push({\n                              pathname: '/pagos/transferencia',\n                              colorFiltro,\n                            })\n                          }\n                        },\n                      }}\n                    />\n                  </Tab>\n                  <Tab eventKey=\"interna\" title=\"Interna\">\n                    <CChartBar\n                      data={{\n                        labels: semaforosNomIndividualI,\n                        datasets: [\n                          {\n                            backgroundColor: ['#D02F2F', '#AF940B', '#428A49'],\n                            data: semaforosIndividualI,\n                          },\n                        ],\n                      }}\n                      options={{\n                        plugins: {\n                          title: {\n                            display: true,\n                            text: 'Total de pagos: ' + PagosTotalesIndividualI,\n                            font: {\n                              weight: 'normal',\n                            },\n                            position: 'bottom',\n                          },\n                          legend: {\n                            display: false,\n                          },\n                        },\n                        onClick: (e, a) => {\n                          //console.log(e) captura el evento\n                          //console.log(a) captura el item de la grafica y devuelve array\n                          if (a.length > 0) {\n                            let colorFiltro = 'NO'\n                            if (a[0].index === 0) {\n                              colorFiltro = 'ROJO'\n                            }\n                            if (a[0].index === 1) {\n                              colorFiltro = 'AMARILLO'\n                            }\n                            if (a[0].index === 2) {\n                              colorFiltro = 'VERDE'\n                            }\n                            history.push({\n                              pathname: '/pagos/interna',\n                              colorFiltro,\n                            })\n                          }\n                        },\n                      }}\n                    />\n                  </Tab>\n                </Tabs>\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs={6} style={{ marginTop: '10px' }}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>Cantidad de pagos por estado</CCardHeader>\n              <CCardBody>\n                <CChartDoughnut\n                  data={{\n                    labels: estados,\n                    datasets: [\n                      {\n                        backgroundColor: [\n                          '#D02F2F',\n                          '#AF940B',\n                          '#428A49',\n                          '#40389D',\n                          '#8A5C84',\n                          '#553D26',\n                          '#CD530F',\n                          '#454143',\n                          '#0B4B4E',\n                          '#7D1843',\n                          '#6B9614',\n                        ],\n                        hoverBackgroundColor: [\n                          '#CC5855',\n                          '#C7C246',\n                          '#56A05A',\n                          '#6F72C5',\n                          '#8E6BC2',\n                          '#825E3D',\n                          '#CF7340',\n                          '#676768',\n                          '#18787D',\n                          '#87405E',\n                          '#9DCA42',\n                        ],\n                        data: results,\n                      },\n                    ],\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs={6} style={{ marginTop: '10px' }}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>Cantidad de pagos aprobados por tipo</CCardHeader>\n              <CCardBody>\n                <CChartPie\n                  data={{\n                    labels: tipos,\n                    datasets: [\n                      {\n                        data: pagos,\n                        backgroundColor: ['#D02F2F', '#AF940B', '#428A49'],\n                        hoverBackgroundColor: ['#CC5855', '#C7C246', '#56A05A'],\n                      },\n                    ],\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>Promedio de tiempo de pagos entre estados (Horas)</CCardHeader>\n              <CCardBody>\n                <CChartBar\n                  data={{\n                    labels: estadosLabel,\n                    datasets: [\n                      {\n                        label: 'Horas',\n                        backgroundColor: '#1D2377',\n                        data: promedioT,\n                      },\n                    ],\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </>\n    )\n  } else {\n    history.push('/')\n    return <div className=\"sin-sesion\">SIN SESIÓN ACTIVA.</div>\n  }\n}\n\nexport default Dashboard\n"],"sourceRoot":""}