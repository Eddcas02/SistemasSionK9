{"version":3,"sources":["services/postCrudBancos.js","services/getPaises.js","views/components/flujos/bancos/NuevoBanco.js"],"names":["API","process","postCrudBancos","idBanco","nombre","direccion","codigoTransferencia","codigoSAP","idPais","estado","opcion","id_usuario","token","ApiFinal","ApiWhere","datos","id_banco","codigo_transferencia","codigo_SAP","id_pais","activo","data","JSON","stringify","fetch","method","body","headers","Authorization","Accept","then","response","json","catch","error","getPaises","IdPais","Nombre","NuevoBanco","props","history","useHistory","time","setTime","useState","session","clear","useSession","show","setShow","showM","setShowM","mensaje","setMensaje","results","setList","form","setValues","pais","useEffect","mounted","api_token","items","paises","handleInput","event","target","name","value","handleSubmit","async","preventDefault","respuesta","id","push","Cancelar","idUsuario","postSesionUsuario","style","flexDirection","responsive","variant","onHide","centered","Header","closeButton","Title","Body","Footer","color","onClick","className","marginBottom","size","goBack","onClose","dismissible","Heading","display","alignItems","width","type","placeholder","onChange","map","item","i"],"mappings":"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","file":"static/js/50.e7df0b12.chunk.js","sourcesContent":["const API = `${process.env.REACT_APP_API_URL}bancos`\n\nexport function postCrudBancos(\n  idBanco,\n  nombre,\n  direccion,\n  codigoTransferencia,\n  codigoSAP,\n  idPais,\n  estado,\n  opcion,\n  id_usuario,\n  token,\n) {\n  let ApiFinal = API\n  let ApiWhere = ''\n\n  var datos = {\n    id_banco: idBanco,\n    nombre: nombre,\n    direccion: direccion,\n    codigo_transferencia: codigoTransferencia,\n    codigo_SAP: codigoSAP,\n    id_pais: idPais,\n    activo: estado,\n    opcion: opcion,\n    id_usuario: id_usuario,\n  }\n\n  if (idBanco !== '' && opcion !== '') {\n    ApiWhere += '/' + idBanco + '/' + opcion\n  }\n  ApiFinal += ApiWhere\n\n  const data = JSON.stringify(datos)\n  return fetch(ApiFinal, {\n    method: 'POST',\n    body: data,\n    headers: {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json',\n      'Content-type': 'application/json;charset=UTF-8',\n    },\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      return response\n    })\n    .catch((error) => error)\n}\n","const API = `${process.env.REACT_APP_API_URL}paises`\n\nexport function getPaises(IdPais, Nombre, token) {\n  let ApiFinal = API\n  let ApiWhere = ''\n  if (IdPais !== null) {\n    ApiWhere += '/' + IdPais\n  }\n  if (Nombre !== null) {\n    ApiWhere += '/' + Nombre\n  }\n  ApiFinal += ApiWhere\n  return fetch(ApiFinal, {\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json',\n    },\n  })\n    .then(function (response) {\n      return response.json()\n    })\n    .catch((error) => error)\n}\n","import React, { useState, useEffect } from 'react'\nimport { useSession } from 'react-use-session'\nimport { Alert, Modal, Button } from 'react-bootstrap'\nimport { useHistory } from 'react-router-dom'\nimport { useIdleTimer } from 'react-idle-timer'\nimport { postCrudBancos } from '../../../../services/postCrudBancos'\nimport { postSesionUsuario } from '../../../../services/postSesionUsuario'\nimport { getPaises } from '../../../../services/getPaises'\nimport { FiFlag } from 'react-icons/fi'\nimport { GrLocation } from 'react-icons/gr'\nimport { RiBankLine, RiBarcodeFill } from 'react-icons/ri'\nimport '../../../../scss/estilos.scss'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CContainer,\n  CForm,\n  CFormSelect,\n  CFormControl,\n  CInputGroup,\n  CInputGroupText,\n} from '@coreui/react'\nimport { FaArrowLeft } from 'react-icons/fa'\n\nconst NuevoBanco = (props) => {\n  const history = useHistory()\n  const [time, setTime] = useState(null)\n  const { session, clear } = useSession('PendrogonIT-Session')\n  const [show, setShow] = useState(false)\n  const [showM, setShowM] = useState(false)\n  const [mensaje, setMensaje] = useState('')\n  const [results, setList] = useState([])\n\n  const [form, setValues] = useState({\n    nombre: '',\n    direccion: '',\n    pais: '',\n    codigoTransferencia: '',\n    codigoSAP: '',\n  })\n\n  useEffect(() => {\n    let mounted = true\n    getPaises(null, null, session.api_token).then((items) => {\n      if (mounted) {\n        setList(items.paises)\n      }\n    })\n    return () => (mounted = false)\n  }, [])\n\n  const handleInput = (event) => {\n    setValues({\n      ...form,\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    if (\n      form.nombre !== '' &&\n      form.direccion !== '' &&\n      form.pais !== '' &&\n      form.codigoTransferencia !== ''\n    ) {\n      event.preventDefault()\n      const respuesta = await postCrudBancos(\n        '',\n        form.nombre,\n        form.direccion,\n        form.codigoTransferencia,\n        form.codigoSAP,\n        form.pais,\n        '',\n        '',\n        session.id,\n        session.api_token,\n      )\n      if (respuesta === 'OK') {\n        history.push('/bancos')\n      } else if (respuesta === 'Repetido') {\n        setShow(true)\n        setMensaje('Este banco según el código de transferencia ingresado ya existe.')\n      }\n    } else {\n      setShow(true)\n      setMensaje('No has llenado todos los campos.')\n    }\n  }\n\n  async function Cancelar(opcion) {\n    if (opcion == 1) {\n      setShowM(false)\n    } else if (opcion == 2) {\n      let idUsuario = 0\n      if (session) {\n        idUsuario = session.id\n      }\n      const respuesta = await postSesionUsuario(idUsuario, null, null, '2', session.api_token)\n      if (respuesta === 'OK') {\n        clear()\n        history.push('/')\n      }\n    }\n  }\n\n  if (session) {\n    return (\n      <div style={{ flexDirection: 'row' }}>\n        <CContainer>\n          <Modal responsive variant=\"primary\" show={showM} onHide={() => Cancelar(2)} centered>\n            <Modal.Header closeButton>\n              <Modal.Title>Confirmación</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{mensaje}</Modal.Body>\n            <Modal.Footer>\n              <CButton color=\"secondary\" onClick={() => Cancelar(2)}>\n                Cancelar\n              </CButton>\n              <CButton color=\"primary\" onClick={() => Cancelar(1)}>\n                Aceptar\n              </CButton>\n            </Modal.Footer>\n          </Modal>\n          <div className=\"float-left\" style={{ marginBottom: '10px' }}>\n            <Button variant=\"primary\" size=\"sm\" onClick={() => history.goBack()}>\n              <FaArrowLeft />\n              &nbsp;&nbsp;Regresar\n            </Button>\n          </div>\n          <br />\n          <br />\n          <Alert show={show} variant=\"danger\" onClose={() => setShow(false)} dismissible>\n            <Alert.Heading>Error!</Alert.Heading>\n            <p>{mensaje}</p>\n          </Alert>\n          <CCard style={{ display: 'flex', alignItems: 'center' }}>\n            <CCardBody style={{ width: '80%' }}>\n              <CForm style={{ width: '100%' }}>\n                <h1>Creación de Banco</h1>\n                <p className=\"text-medium-emphasis\">Registre un nuevo banco</p>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText>\n                    <RiBankLine />\n                  </CInputGroupText>\n                  <CFormControl\n                    type=\"text\"\n                    placeholder=\"Nombre\"\n                    name=\"nombre\"\n                    onChange={handleInput}\n                  />\n                </CInputGroup>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText>\n                    <GrLocation />\n                  </CInputGroupText>\n                  <CFormControl\n                    type=\"text\"\n                    placeholder=\"Dirección\"\n                    name=\"direccion\"\n                    onChange={handleInput}\n                  />\n                </CInputGroup>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText>\n                    <RiBarcodeFill />\n                  </CInputGroupText>\n                  <CFormControl\n                    type=\"text\"\n                    placeholder=\"Código Transferencia\"\n                    name=\"codigoTransferencia\"\n                    onChange={handleInput}\n                  />\n                </CInputGroup>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText>\n                    <RiBarcodeFill />\n                  </CInputGroupText>\n                  <CFormControl\n                    type=\"text\"\n                    placeholder=\"Código SAP\"\n                    name=\"codigoSAP\"\n                    onChange={handleInput}\n                  />\n                </CInputGroup>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText>\n                    <FiFlag />\n                  </CInputGroupText>\n                  <CFormSelect name=\"pais\" onChange={handleInput}>\n                    <option>Seleccione país. (Opcional)</option>\n                    {results.map((item, i) => {\n                      return (\n                        <option key={item.IdPais} value={item.IdPais}>\n                          {item.Nombre}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                </CInputGroup>\n                <CButton color=\"primary\" onClick={handleSubmit}>\n                  Crear Banco\n                </CButton>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CContainer>\n      </div>\n    )\n  } else {\n    history.push('/')\n    return <div className=\"sin-sesion\">SIN SESIÓN ACTIVA.</div>\n  }\n}\n\nexport default NuevoBanco\n"],"sourceRoot":""}